## This file configures the analyzer, which statically analyzes Dart code to
## check for errors, warnings, and lints.
##
## The issues identified by the analyzer are surfaced in the UI of Dart-enabled
## IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
## invoked from the command line by running `flutter analyze`.
#
## The following line activates a set of recommended lints for Flutter apps,
## packages, and plugins designed to encourage good coding practices.
#include: package:flutter_lints/flutter.yaml
#
#linter:
#  # The lint rules applied to this project can be customized in the
#  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
#  # included above or to enable additional rules. A list of all available lints
#  # and their documentation is published at
#  # https://dart-lang.github.io/linter/lints/index.html.
#  #
#  # Instead of disabling a lint rule for the entire project in the
#  # section below, it can also be suppressed for a single line of code
#  # or a specific dart file by using the `// ignore: name_of_lint` and
#  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
#  # producing the lint.
#  rules:
#    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
#    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
#
## Additional information about this file can be found at
## https://dart.dev/guides/language/analysis-options
#
#
#



#---------------------------------------------------------------------#


# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

#analyzer:
#  exclude:
#    - lib/apis/api_call.dart/**
#
#  # [warning, info, ignore, error]
#  errors:
#    unused_local_variable: error
#    invalid_assignment: error
#    missing_return: error
#    dead_code: error
#    todo: error
#
#  # [false, true]
#  language:
#    strict-casts: true
#    strict-inference: true
#    strict-raw-types: true
#
#  # [false, true]
#  strong-mode:
#    implicit-casts: false
#    implicit-dynamic: false
#    declaration-casts: false
#
#  enable-experiment:
#    - super-mixins
#    - no-slow-checks


linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    - argument_type_not_assignable
    - inference_failure_on_collection_literal
    - one_member_abstracts
    - only_throw_errors
    - package_api_docs
    - prefer_final_in_for_each
    # error rules
    - avoid_dynamic_calls
    - always_use_package_imports
    - avoid_print
    - avoid_empty_else
    - avoid_relative_lib_imports
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - cancel_subscriptions
    - close_sinks
    - comment_references
    - control_flow_in_finally
    - iterable_contains_unrelated_type
    - empty_statements
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_logic_in_create_state
    # - prefer_relative_imports
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    - unsafe_html
    - use_build_context_synchronously
    - use_key_in_widget_constructors
    # Style rules
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - always_require_non_null_named_parameters
    - always_specify_types
#    - annotate_overrides
#    - avoid_annotating_with_dynamic
    - camel_case_types
    - library_names
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - unnecessary_brace_in_string_interps
    - avoid_redundant_argument_values
    - leading_newlines_in_multiline_strings
    - use_rethrow_when_possible
    # formatting
    - lines_longer_than_100_chars
    - curly_braces_in_flow_control_structures
    # doc comments
    - slash_for_doc_comments
    # pub rules
    - depend_on_referenced_packages
    - package_names
    - secure_pubspec_urls
    - sort_pub_dependencies
    #          - prefer_const_declarations
    #     avoid_print: false  # Uncomment to disable the `avoid_print` rule
    - prefer_single_quotes: true # Uncomment to enable the `prefer_single_quotes` rule
    - avoid_shadowing_type_parameters: false
    - await_only_futures: true
    - prefer_const_constructors: false
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
